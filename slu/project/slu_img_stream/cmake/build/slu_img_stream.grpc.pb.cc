// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: slu_img_stream.proto

#include "slu_img_stream.pb.h"
#include "slu_img_stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sluimgstream {

static const char* SluImgStream_method_names[] = {
  "/sluimgstream.SluImgStream/PassData",
  "/sluimgstream.SluImgStream/PassImages",
  "/sluimgstream.SluImgStream/GetConnection",
};

std::unique_ptr< SluImgStream::Stub> SluImgStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SluImgStream::Stub> stub(new SluImgStream::Stub(channel, options));
  return stub;
}

SluImgStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PassData_(SluImgStream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PassImages_(SluImgStream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetConnection_(SluImgStream_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SluImgStream::Stub::PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::sluimgstream::ServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PassData_, context, request, response);
}

void SluImgStream::Stub::async::PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PassData_, context, request, response, std::move(f));
}

void SluImgStream::Stub::async::PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PassData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>* SluImgStream::Stub::PrepareAsyncPassDataRaw(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sluimgstream::ServerResponse, ::sluimgstream::DataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PassData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>* SluImgStream::Stub::AsyncPassDataRaw(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPassDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* SluImgStream::Stub::PassImagesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>::Create(channel_.get(), rpcmethod_PassImages_, context);
}

void SluImgStream::Stub::async::PassImages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sluimgstream::ResponseImages,::sluimgstream::ResponseImages>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sluimgstream::ResponseImages,::sluimgstream::ResponseImages>::Create(stub_->channel_.get(), stub_->rpcmethod_PassImages_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* SluImgStream::Stub::AsyncPassImagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>::Create(channel_.get(), cq, rpcmethod_PassImages_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* SluImgStream::Stub::PrepareAsyncPassImagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>::Create(channel_.get(), cq, rpcmethod_PassImages_, context, false, nullptr);
}

::grpc::Status SluImgStream::Stub::GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::sluimgstream::ConfirmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConnection_, context, request, response);
}

void SluImgStream::Stub::async::GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, std::move(f));
}

void SluImgStream::Stub::async::GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>* SluImgStream::Stub::PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sluimgstream::ConfirmResponse, ::sluimgstream::InitialRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>* SluImgStream::Stub::AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

SluImgStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SluImgStream_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SluImgStream::Service, ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SluImgStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sluimgstream::DataRequest* req,
             ::sluimgstream::ServerResponse* resp) {
               return service->PassData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SluImgStream_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SluImgStream::Service, ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>(
          [](SluImgStream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sluimgstream::ResponseImages,
             ::sluimgstream::ResponseImages>* stream) {
               return service->PassImages(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SluImgStream_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SluImgStream::Service, ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SluImgStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sluimgstream::InitialRequest* req,
             ::sluimgstream::ConfirmResponse* resp) {
               return service->GetConnection(ctx, req, resp);
             }, this)));
}

SluImgStream::Service::~Service() {
}

::grpc::Status SluImgStream::Service::PassData(::grpc::ServerContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SluImgStream::Service::PassImages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SluImgStream::Service::GetConnection(::grpc::ServerContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sluimgstream

