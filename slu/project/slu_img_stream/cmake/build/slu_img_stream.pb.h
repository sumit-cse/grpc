// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slu_img_stream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_slu_5fimg_5fstream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_slu_5fimg_5fstream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_slu_5fimg_5fstream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_slu_5fimg_5fstream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_slu_5fimg_5fstream_2eproto;
namespace sluimgstream {
class ProcessedDataRequest;
struct ProcessedDataRequestDefaultTypeInternal;
extern ProcessedDataRequestDefaultTypeInternal _ProcessedDataRequest_default_instance_;
class ReadyToReceiveImagesRequest;
struct ReadyToReceiveImagesRequestDefaultTypeInternal;
extern ReadyToReceiveImagesRequestDefaultTypeInternal _ReadyToReceiveImagesRequest_default_instance_;
class ResponseDataReceived;
struct ResponseDataReceivedDefaultTypeInternal;
extern ResponseDataReceivedDefaultTypeInternal _ResponseDataReceived_default_instance_;
class ResponseImages;
struct ResponseImagesDefaultTypeInternal;
extern ResponseImagesDefaultTypeInternal _ResponseImages_default_instance_;
}  // namespace sluimgstream
PROTOBUF_NAMESPACE_OPEN
template<> ::sluimgstream::ProcessedDataRequest* Arena::CreateMaybeMessage<::sluimgstream::ProcessedDataRequest>(Arena*);
template<> ::sluimgstream::ReadyToReceiveImagesRequest* Arena::CreateMaybeMessage<::sluimgstream::ReadyToReceiveImagesRequest>(Arena*);
template<> ::sluimgstream::ResponseDataReceived* Arena::CreateMaybeMessage<::sluimgstream::ResponseDataReceived>(Arena*);
template<> ::sluimgstream::ResponseImages* Arena::CreateMaybeMessage<::sluimgstream::ResponseImages>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sluimgstream {

// ===================================================================

class ReadyToReceiveImagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sluimgstream.ReadyToReceiveImagesRequest) */ {
 public:
  inline ReadyToReceiveImagesRequest() : ReadyToReceiveImagesRequest(nullptr) {}
  ~ReadyToReceiveImagesRequest() override;
  explicit constexpr ReadyToReceiveImagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyToReceiveImagesRequest(const ReadyToReceiveImagesRequest& from);
  ReadyToReceiveImagesRequest(ReadyToReceiveImagesRequest&& from) noexcept
    : ReadyToReceiveImagesRequest() {
    *this = ::std::move(from);
  }

  inline ReadyToReceiveImagesRequest& operator=(const ReadyToReceiveImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyToReceiveImagesRequest& operator=(ReadyToReceiveImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadyToReceiveImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyToReceiveImagesRequest* internal_default_instance() {
    return reinterpret_cast<const ReadyToReceiveImagesRequest*>(
               &_ReadyToReceiveImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadyToReceiveImagesRequest& a, ReadyToReceiveImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyToReceiveImagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyToReceiveImagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyToReceiveImagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyToReceiveImagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadyToReceiveImagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadyToReceiveImagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyToReceiveImagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sluimgstream.ReadyToReceiveImagesRequest";
  }
  protected:
  explicit ReadyToReceiveImagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyClientFlagFieldNumber = 1,
  };
  // bool readyClientFlag = 1;
  void clear_readyclientflag();
  bool readyclientflag() const;
  void set_readyclientflag(bool value);
  private:
  bool _internal_readyclientflag() const;
  void _internal_set_readyclientflag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sluimgstream.ReadyToReceiveImagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool readyclientflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_slu_5fimg_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ResponseImages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sluimgstream.ResponseImages) */ {
 public:
  inline ResponseImages() : ResponseImages(nullptr) {}
  ~ResponseImages() override;
  explicit constexpr ResponseImages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseImages(const ResponseImages& from);
  ResponseImages(ResponseImages&& from) noexcept
    : ResponseImages() {
    *this = ::std::move(from);
  }

  inline ResponseImages& operator=(const ResponseImages& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseImages& operator=(ResponseImages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseImages& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseImages* internal_default_instance() {
    return reinterpret_cast<const ResponseImages*>(
               &_ResponseImages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseImages& a, ResponseImages& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseImages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseImages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseImages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseImages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseImages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseImages& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseImages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sluimgstream.ResponseImages";
  }
  protected:
  explicit ResponseImages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDataFieldNumber = 2,
    kImgSizeFieldNumber = 1,
  };
  // bytes img_data = 2;
  void clear_img_data();
  const std::string& img_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img_data();
  PROTOBUF_NODISCARD std::string* release_img_data();
  void set_allocated_img_data(std::string* img_data);
  private:
  const std::string& _internal_img_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img_data(const std::string& value);
  std::string* _internal_mutable_img_data();
  public:

  // uint32 img_size = 1;
  void clear_img_size();
  uint32_t img_size() const;
  void set_img_size(uint32_t value);
  private:
  uint32_t _internal_img_size() const;
  void _internal_set_img_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sluimgstream.ResponseImages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_data_;
  uint32_t img_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_slu_5fimg_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ProcessedDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sluimgstream.ProcessedDataRequest) */ {
 public:
  inline ProcessedDataRequest() : ProcessedDataRequest(nullptr) {}
  ~ProcessedDataRequest() override;
  explicit constexpr ProcessedDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessedDataRequest(const ProcessedDataRequest& from);
  ProcessedDataRequest(ProcessedDataRequest&& from) noexcept
    : ProcessedDataRequest() {
    *this = ::std::move(from);
  }

  inline ProcessedDataRequest& operator=(const ProcessedDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessedDataRequest& operator=(ProcessedDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessedDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessedDataRequest* internal_default_instance() {
    return reinterpret_cast<const ProcessedDataRequest*>(
               &_ProcessedDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessedDataRequest& a, ProcessedDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessedDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessedDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessedDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessedDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessedDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessedDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessedDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sluimgstream.ProcessedDataRequest";
  }
  protected:
  explicit ProcessedDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDataFieldNumber = 2,
    kImgSizeFieldNumber = 1,
  };
  // bytes img_data = 2;
  void clear_img_data();
  const std::string& img_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img_data();
  PROTOBUF_NODISCARD std::string* release_img_data();
  void set_allocated_img_data(std::string* img_data);
  private:
  const std::string& _internal_img_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img_data(const std::string& value);
  std::string* _internal_mutable_img_data();
  public:

  // uint32 img_size = 1;
  void clear_img_size();
  uint32_t img_size() const;
  void set_img_size(uint32_t value);
  private:
  uint32_t _internal_img_size() const;
  void _internal_set_img_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sluimgstream.ProcessedDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_data_;
  uint32_t img_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_slu_5fimg_5fstream_2eproto;
};
// -------------------------------------------------------------------

class ResponseDataReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sluimgstream.ResponseDataReceived) */ {
 public:
  inline ResponseDataReceived() : ResponseDataReceived(nullptr) {}
  ~ResponseDataReceived() override;
  explicit constexpr ResponseDataReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseDataReceived(const ResponseDataReceived& from);
  ResponseDataReceived(ResponseDataReceived&& from) noexcept
    : ResponseDataReceived() {
    *this = ::std::move(from);
  }

  inline ResponseDataReceived& operator=(const ResponseDataReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseDataReceived& operator=(ResponseDataReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseDataReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseDataReceived* internal_default_instance() {
    return reinterpret_cast<const ResponseDataReceived*>(
               &_ResponseDataReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseDataReceived& a, ResponseDataReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseDataReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseDataReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseDataReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseDataReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseDataReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseDataReceived& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseDataReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sluimgstream.ResponseDataReceived";
  }
  protected:
  explicit ResponseDataReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgeDataReceiveFieldNumber = 1,
  };
  // bool acknowledgeDataReceive = 1;
  void clear_acknowledgedatareceive();
  bool acknowledgedatareceive() const;
  void set_acknowledgedatareceive(bool value);
  private:
  bool _internal_acknowledgedatareceive() const;
  void _internal_set_acknowledgedatareceive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sluimgstream.ResponseDataReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool acknowledgedatareceive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_slu_5fimg_5fstream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadyToReceiveImagesRequest

// bool readyClientFlag = 1;
inline void ReadyToReceiveImagesRequest::clear_readyclientflag() {
  readyclientflag_ = false;
}
inline bool ReadyToReceiveImagesRequest::_internal_readyclientflag() const {
  return readyclientflag_;
}
inline bool ReadyToReceiveImagesRequest::readyclientflag() const {
  // @@protoc_insertion_point(field_get:sluimgstream.ReadyToReceiveImagesRequest.readyClientFlag)
  return _internal_readyclientflag();
}
inline void ReadyToReceiveImagesRequest::_internal_set_readyclientflag(bool value) {
  
  readyclientflag_ = value;
}
inline void ReadyToReceiveImagesRequest::set_readyclientflag(bool value) {
  _internal_set_readyclientflag(value);
  // @@protoc_insertion_point(field_set:sluimgstream.ReadyToReceiveImagesRequest.readyClientFlag)
}

// -------------------------------------------------------------------

// ResponseImages

// uint32 img_size = 1;
inline void ResponseImages::clear_img_size() {
  img_size_ = 0u;
}
inline uint32_t ResponseImages::_internal_img_size() const {
  return img_size_;
}
inline uint32_t ResponseImages::img_size() const {
  // @@protoc_insertion_point(field_get:sluimgstream.ResponseImages.img_size)
  return _internal_img_size();
}
inline void ResponseImages::_internal_set_img_size(uint32_t value) {
  
  img_size_ = value;
}
inline void ResponseImages::set_img_size(uint32_t value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:sluimgstream.ResponseImages.img_size)
}

// bytes img_data = 2;
inline void ResponseImages::clear_img_data() {
  img_data_.ClearToEmpty();
}
inline const std::string& ResponseImages::img_data() const {
  // @@protoc_insertion_point(field_get:sluimgstream.ResponseImages.img_data)
  return _internal_img_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseImages::set_img_data(ArgT0&& arg0, ArgT... args) {
 
 img_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sluimgstream.ResponseImages.img_data)
}
inline std::string* ResponseImages::mutable_img_data() {
  std::string* _s = _internal_mutable_img_data();
  // @@protoc_insertion_point(field_mutable:sluimgstream.ResponseImages.img_data)
  return _s;
}
inline const std::string& ResponseImages::_internal_img_data() const {
  return img_data_.Get();
}
inline void ResponseImages::_internal_set_img_data(const std::string& value) {
  
  img_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseImages::_internal_mutable_img_data() {
  
  return img_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseImages::release_img_data() {
  // @@protoc_insertion_point(field_release:sluimgstream.ResponseImages.img_data)
  return img_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseImages::set_allocated_img_data(std::string* img_data) {
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (img_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sluimgstream.ResponseImages.img_data)
}

// -------------------------------------------------------------------

// ProcessedDataRequest

// uint32 img_size = 1;
inline void ProcessedDataRequest::clear_img_size() {
  img_size_ = 0u;
}
inline uint32_t ProcessedDataRequest::_internal_img_size() const {
  return img_size_;
}
inline uint32_t ProcessedDataRequest::img_size() const {
  // @@protoc_insertion_point(field_get:sluimgstream.ProcessedDataRequest.img_size)
  return _internal_img_size();
}
inline void ProcessedDataRequest::_internal_set_img_size(uint32_t value) {
  
  img_size_ = value;
}
inline void ProcessedDataRequest::set_img_size(uint32_t value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:sluimgstream.ProcessedDataRequest.img_size)
}

// bytes img_data = 2;
inline void ProcessedDataRequest::clear_img_data() {
  img_data_.ClearToEmpty();
}
inline const std::string& ProcessedDataRequest::img_data() const {
  // @@protoc_insertion_point(field_get:sluimgstream.ProcessedDataRequest.img_data)
  return _internal_img_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProcessedDataRequest::set_img_data(ArgT0&& arg0, ArgT... args) {
 
 img_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sluimgstream.ProcessedDataRequest.img_data)
}
inline std::string* ProcessedDataRequest::mutable_img_data() {
  std::string* _s = _internal_mutable_img_data();
  // @@protoc_insertion_point(field_mutable:sluimgstream.ProcessedDataRequest.img_data)
  return _s;
}
inline const std::string& ProcessedDataRequest::_internal_img_data() const {
  return img_data_.Get();
}
inline void ProcessedDataRequest::_internal_set_img_data(const std::string& value) {
  
  img_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProcessedDataRequest::_internal_mutable_img_data() {
  
  return img_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProcessedDataRequest::release_img_data() {
  // @@protoc_insertion_point(field_release:sluimgstream.ProcessedDataRequest.img_data)
  return img_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProcessedDataRequest::set_allocated_img_data(std::string* img_data) {
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (img_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sluimgstream.ProcessedDataRequest.img_data)
}

// -------------------------------------------------------------------

// ResponseDataReceived

// bool acknowledgeDataReceive = 1;
inline void ResponseDataReceived::clear_acknowledgedatareceive() {
  acknowledgedatareceive_ = false;
}
inline bool ResponseDataReceived::_internal_acknowledgedatareceive() const {
  return acknowledgedatareceive_;
}
inline bool ResponseDataReceived::acknowledgedatareceive() const {
  // @@protoc_insertion_point(field_get:sluimgstream.ResponseDataReceived.acknowledgeDataReceive)
  return _internal_acknowledgedatareceive();
}
inline void ResponseDataReceived::_internal_set_acknowledgedatareceive(bool value) {
  
  acknowledgedatareceive_ = value;
}
inline void ResponseDataReceived::set_acknowledgedatareceive(bool value) {
  _internal_set_acknowledgedatareceive(value);
  // @@protoc_insertion_point(field_set:sluimgstream.ResponseDataReceived.acknowledgeDataReceive)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sluimgstream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_slu_5fimg_5fstream_2eproto
