// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: slu_img_stream.proto
#ifndef GRPC_slu_5fimg_5fstream_2eproto__INCLUDED
#define GRPC_slu_5fimg_5fstream_2eproto__INCLUDED

#include "slu_img_stream.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sluimgstream {

class SluImgStream final {
 public:
  static constexpr char const* service_full_name() {
    return "sluimgstream.SluImgStream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sluimgstream::ResponseImages>> SendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sluimgstream::ResponseImages>>(SendImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sluimgstream::ResponseImages>> AsyncSendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sluimgstream::ResponseImages>>(AsyncSendImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sluimgstream::ResponseImages>> PrepareAsyncSendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sluimgstream::ResponseImages>>(PrepareAsyncSendImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::sluimgstream::ProcessedDataRequest>> ReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::sluimgstream::ProcessedDataRequest>>(ReceiveDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sluimgstream::ProcessedDataRequest>> AsyncReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sluimgstream::ProcessedDataRequest>>(AsyncReceiveDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sluimgstream::ProcessedDataRequest>> PrepareAsyncReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::sluimgstream::ProcessedDataRequest>>(PrepareAsyncReceiveDataRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest* request, ::grpc::ClientReadReactor< ::sluimgstream::ResponseImages>* reactor) = 0;
      virtual void ReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::ClientWriteReactor< ::sluimgstream::ProcessedDataRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::sluimgstream::ResponseImages>* SendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sluimgstream::ResponseImages>* AsyncSendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sluimgstream::ResponseImages>* PrepareAsyncSendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::sluimgstream::ProcessedDataRequest>* ReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::sluimgstream::ProcessedDataRequest>* AsyncReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::sluimgstream::ProcessedDataRequest>* PrepareAsyncReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::sluimgstream::ResponseImages>> SendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sluimgstream::ResponseImages>>(SendImagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>> AsyncSendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>>(AsyncSendImagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>> PrepareAsyncSendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>>(PrepareAsyncSendImagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::sluimgstream::ProcessedDataRequest>> ReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::sluimgstream::ProcessedDataRequest>>(ReceiveDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>> AsyncReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>>(AsyncReceiveDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>> PrepareAsyncReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>>(PrepareAsyncReceiveDataRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest* request, ::grpc::ClientReadReactor< ::sluimgstream::ResponseImages>* reactor) override;
      void ReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::ClientWriteReactor< ::sluimgstream::ProcessedDataRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::sluimgstream::ResponseImages>* SendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request) override;
    ::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>* AsyncSendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>* PrepareAsyncSendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::sluimgstream::ProcessedDataRequest>* ReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response) override;
    ::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>* AsyncReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>* PrepareAsyncReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendImages_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendImages(::grpc::ServerContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest* request, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* writer);
    virtual ::grpc::Status ReceiveData(::grpc::ServerContext* context, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* reader, ::sluimgstream::ResponseDataReceived* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendImages() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImages(::grpc::ServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendImages(::grpc::ServerContext* context, ::sluimgstream::ReadyToReceiveImagesRequest* request, ::grpc::ServerAsyncWriter< ::sluimgstream::ResponseImages>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReceiveData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* /*reader*/, ::sluimgstream::ResponseDataReceived* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::sluimgstream::ResponseDataReceived, ::sluimgstream::ProcessedDataRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendImages<WithAsyncMethod_ReceiveData<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendImages() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sluimgstream::ReadyToReceiveImagesRequest, ::sluimgstream::ResponseImages>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest* request) { return this->SendImages(context, request); }));
    }
    ~WithCallbackMethod_SendImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImages(::grpc::ServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sluimgstream::ResponseImages>* SendImages(
      ::grpc::CallbackServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveData() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::sluimgstream::ProcessedDataRequest, ::sluimgstream::ResponseDataReceived>(
            [this](
                   ::grpc::CallbackServerContext* context, ::sluimgstream::ResponseDataReceived* response) { return this->ReceiveData(context, response); }));
    }
    ~WithCallbackMethod_ReceiveData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* /*reader*/, ::sluimgstream::ResponseDataReceived* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::sluimgstream::ProcessedDataRequest>* ReceiveData(
      ::grpc::CallbackServerContext* /*context*/, ::sluimgstream::ResponseDataReceived* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendImages<WithCallbackMethod_ReceiveData<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendImages() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImages(::grpc::ServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReceiveData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* /*reader*/, ::sluimgstream::ResponseDataReceived* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendImages() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImages(::grpc::ServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendImages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReceiveData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* /*reader*/, ::sluimgstream::ResponseDataReceived* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendImages() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SendImages(context, request); }));
    }
    ~WithRawCallbackMethod_SendImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendImages(::grpc::ServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SendImages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveData() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ReceiveData(context, response); }));
    }
    ~WithRawCallbackMethod_ReceiveData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* /*reader*/, ::sluimgstream::ResponseDataReceived* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ReceiveData(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SendImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SendImages() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sluimgstream::ReadyToReceiveImagesRequest, ::sluimgstream::ResponseImages>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sluimgstream::ReadyToReceiveImagesRequest, ::sluimgstream::ResponseImages>* streamer) {
                       return this->StreamedSendImages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SendImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendImages(::grpc::ServerContext* /*context*/, const ::sluimgstream::ReadyToReceiveImagesRequest* /*request*/, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSendImages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sluimgstream::ReadyToReceiveImagesRequest,::sluimgstream::ResponseImages>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SendImages<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SendImages<Service > StreamedService;
};

}  // namespace sluimgstream


#endif  // GRPC_slu_5fimg_5fstream_2eproto__INCLUDED
