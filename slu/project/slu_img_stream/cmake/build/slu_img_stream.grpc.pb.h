// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: slu_img_stream.proto
#ifndef GRPC_slu_5fimg_5fstream_2eproto__INCLUDED
#define GRPC_slu_5fimg_5fstream_2eproto__INCLUDED

#include "slu_img_stream.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sluimgstream {

class SluImgStream final {
 public:
  static constexpr char const* service_full_name() {
    return "sluimgstream.SluImgStream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::sluimgstream::ServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ServerResponse>> AsyncPassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ServerResponse>>(AsyncPassDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ServerResponse>> PrepareAsyncPassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ServerResponse>>(PrepareAsyncPassDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>> PassImages(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>>(PassImagesRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>> AsyncPassImages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>>(AsyncPassImagesRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>> PrepareAsyncPassImages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>>(PrepareAsyncPassImagesRaw(context, cq));
    }
    virtual ::grpc::Status GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::sluimgstream::ConfirmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ConfirmResponse>> AsyncGetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ConfirmResponse>>(AsyncGetConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ConfirmResponse>> PrepareAsyncGetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ConfirmResponse>>(PrepareAsyncGetConnectionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PassImages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sluimgstream::ResponseImages,::sluimgstream::ResponseImages>* reactor) = 0;
      virtual void GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ServerResponse>* AsyncPassDataRaw(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ServerResponse>* PrepareAsyncPassDataRaw(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* PassImagesRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* AsyncPassImagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* PrepareAsyncPassImagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ConfirmResponse>* AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sluimgstream::ConfirmResponse>* PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::sluimgstream::ServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>> AsyncPassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>>(AsyncPassDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>> PrepareAsyncPassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>>(PrepareAsyncPassDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>> PassImages(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>>(PassImagesRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>> AsyncPassImages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>>(AsyncPassImagesRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>> PrepareAsyncPassImages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>>(PrepareAsyncPassImagesRaw(context, cq));
    }
    ::grpc::Status GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::sluimgstream::ConfirmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>> AsyncGetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>>(AsyncGetConnectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>> PrepareAsyncGetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>>(PrepareAsyncGetConnectionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response, std::function<void(::grpc::Status)>) override;
      void PassData(::grpc::ClientContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PassImages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sluimgstream::ResponseImages,::sluimgstream::ResponseImages>* reactor) override;
      void GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConnection(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>* AsyncPassDataRaw(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sluimgstream::ServerResponse>* PrepareAsyncPassDataRaw(::grpc::ClientContext* context, const ::sluimgstream::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* PassImagesRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* AsyncPassImagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* PrepareAsyncPassImagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>* AsyncGetConnectionRaw(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sluimgstream::ConfirmResponse>* PrepareAsyncGetConnectionRaw(::grpc::ClientContext* context, const ::sluimgstream::InitialRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PassData_;
    const ::grpc::internal::RpcMethod rpcmethod_PassImages_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConnection_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PassData(::grpc::ServerContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response);
    virtual ::grpc::Status PassImages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* stream);
    virtual ::grpc::Status GetConnection(::grpc::ServerContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PassData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PassData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PassData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassData(::grpc::ServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPassData(::grpc::ServerContext* context, ::sluimgstream::DataRequest* request, ::grpc::ServerAsyncResponseWriter< ::sluimgstream::ServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PassImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PassImages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PassImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassImages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPassImages(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConnection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnection(::grpc::ServerContext* context, ::sluimgstream::InitialRequest* request, ::grpc::ServerAsyncResponseWriter< ::sluimgstream::ConfirmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PassData<WithAsyncMethod_PassImages<WithAsyncMethod_GetConnection<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PassData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PassData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sluimgstream::DataRequest* request, ::sluimgstream::ServerResponse* response) { return this->PassData(context, request, response); }));}
    void SetMessageAllocatorFor_PassData(
        ::grpc::MessageAllocator< ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PassData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassData(::grpc::ServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PassData(
      ::grpc::CallbackServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PassImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PassImages() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PassImages(context); }));
    }
    ~WithCallbackMethod_PassImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassImages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* PassImages(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConnection() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sluimgstream::InitialRequest* request, ::sluimgstream::ConfirmResponse* response) { return this->GetConnection(context, request, response); }));}
    void SetMessageAllocatorFor_GetConnection(
        ::grpc::MessageAllocator< ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PassData<WithCallbackMethod_PassImages<WithCallbackMethod_GetConnection<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PassData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PassData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PassData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassData(::grpc::ServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PassImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PassImages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PassImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassImages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConnection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PassData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PassData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PassData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassData(::grpc::ServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPassData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PassImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PassImages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PassImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassImages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPassImages(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConnection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PassData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PassData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PassData(context, request, response); }));
    }
    ~WithRawCallbackMethod_PassData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassData(::grpc::ServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PassData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PassImages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PassImages() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PassImages(context); }));
    }
    ~WithRawCallbackMethod_PassImages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PassImages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sluimgstream::ResponseImages, ::sluimgstream::ResponseImages>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PassImages(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConnection() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConnection(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConnection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PassData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PassData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sluimgstream::DataRequest, ::sluimgstream::ServerResponse>* streamer) {
                       return this->StreamedPassData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PassData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PassData(::grpc::ServerContext* /*context*/, const ::sluimgstream::DataRequest* /*request*/, ::sluimgstream::ServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPassData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sluimgstream::DataRequest,::sluimgstream::ServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConnection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConnection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sluimgstream::InitialRequest, ::sluimgstream::ConfirmResponse>* streamer) {
                       return this->StreamedGetConnection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConnection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConnection(::grpc::ServerContext* /*context*/, const ::sluimgstream::InitialRequest* /*request*/, ::sluimgstream::ConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConnection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sluimgstream::InitialRequest,::sluimgstream::ConfirmResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PassData<WithStreamedUnaryMethod_GetConnection<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PassData<WithStreamedUnaryMethod_GetConnection<Service > > StreamedService;
};

}  // namespace sluimgstream


#endif  // GRPC_slu_5fimg_5fstream_2eproto__INCLUDED
