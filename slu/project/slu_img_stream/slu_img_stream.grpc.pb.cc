// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: slu_img_stream.proto

#include "slu_img_stream.pb.h"
#include "slu_img_stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sluimgstream {

static const char* SluImgStream_method_names[] = {
  "/sluimgstream.SluImgStream/SendImages",
  "/sluimgstream.SluImgStream/ReceiveData",
};

std::unique_ptr< SluImgStream::Stub> SluImgStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SluImgStream::Stub> stub(new SluImgStream::Stub(channel, options));
  return stub;
}

SluImgStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendImages_(SluImgStream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ReceiveData_(SluImgStream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::sluimgstream::ResponseImages>* SluImgStream::Stub::SendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sluimgstream::ResponseImages>::Create(channel_.get(), rpcmethod_SendImages_, context, request);
}

void SluImgStream::Stub::async::SendImages(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest* request, ::grpc::ClientReadReactor< ::sluimgstream::ResponseImages>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sluimgstream::ResponseImages>::Create(stub_->channel_.get(), stub_->rpcmethod_SendImages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>* SluImgStream::Stub::AsyncSendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sluimgstream::ResponseImages>::Create(channel_.get(), cq, rpcmethod_SendImages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sluimgstream::ResponseImages>* SluImgStream::Stub::PrepareAsyncSendImagesRaw(::grpc::ClientContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sluimgstream::ResponseImages>::Create(channel_.get(), cq, rpcmethod_SendImages_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::sluimgstream::ProcessedDataRequest>* SluImgStream::Stub::ReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response) {
  return ::grpc::internal::ClientWriterFactory< ::sluimgstream::ProcessedDataRequest>::Create(channel_.get(), rpcmethod_ReceiveData_, context, response);
}

void SluImgStream::Stub::async::ReceiveData(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::ClientWriteReactor< ::sluimgstream::ProcessedDataRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::sluimgstream::ProcessedDataRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ReceiveData_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>* SluImgStream::Stub::AsyncReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sluimgstream::ProcessedDataRequest>::Create(channel_.get(), cq, rpcmethod_ReceiveData_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::sluimgstream::ProcessedDataRequest>* SluImgStream::Stub::PrepareAsyncReceiveDataRaw(::grpc::ClientContext* context, ::sluimgstream::ResponseDataReceived* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sluimgstream::ProcessedDataRequest>::Create(channel_.get(), cq, rpcmethod_ReceiveData_, context, response, false, nullptr);
}

SluImgStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SluImgStream_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SluImgStream::Service, ::sluimgstream::ReadyToReceiveImagesRequest, ::sluimgstream::ResponseImages>(
          [](SluImgStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sluimgstream::ReadyToReceiveImagesRequest* req,
             ::grpc::ServerWriter<::sluimgstream::ResponseImages>* writer) {
               return service->SendImages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SluImgStream_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< SluImgStream::Service, ::sluimgstream::ProcessedDataRequest, ::sluimgstream::ResponseDataReceived>(
          [](SluImgStream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::sluimgstream::ProcessedDataRequest>* reader,
             ::sluimgstream::ResponseDataReceived* resp) {
               return service->ReceiveData(ctx, reader, resp);
             }, this)));
}

SluImgStream::Service::~Service() {
}

::grpc::Status SluImgStream::Service::SendImages(::grpc::ServerContext* context, const ::sluimgstream::ReadyToReceiveImagesRequest* request, ::grpc::ServerWriter< ::sluimgstream::ResponseImages>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SluImgStream::Service::ReceiveData(::grpc::ServerContext* context, ::grpc::ServerReader< ::sluimgstream::ProcessedDataRequest>* reader, ::sluimgstream::ResponseDataReceived* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sluimgstream

